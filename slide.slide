Go, a primer

Enric Lluelles

@enriclluelles
enric@lluell.es

* go

- Created at Google, but developed in the open
- Brainchild of Unix pioneers Rob Pike and Ken Thompson 
- Natively compiled, 100% static libraries
- General purpose but focused on servers and systems


.image img/gopher.png

* Projects using it

- Vitess(youtube)
- Docker(docker)
- Etcd, Fleet(coreos)
- Kubernetes(google)
- Heka(mozilla)
- Prometheus, Roshi(soundcloud)
- Juju(canonical)
- NSQ(bitly)
- Consul, Packer, Terraform, Vault, Nomad(hashicorp)

And many many more

* Strong points

- Minimal semantics
- Easy to read
- Easy and fast to compile
- Garbage collected
- Well performant
- Native execution, no VM
- Builtin concurrency model (CSP)

* Types and objects

- basic types
	int, uint, int8, uint8, ...
	bool, string
	float32, float64
	complex64, complex128

- slices and arrays
	
	[]int, [3]string, []struct{ Name string }

* Simple examples

.play code/code1.go

* Go types 2

- structs

	struct {
		Name string
		Age  int
	}

- functions

  func(i int, j int) int, error

* Simple examples 2

.play code/code2.go /start/,/end/

* Go types 3

- maps

	map[string]int

- types

  type MyType struct {
    MyAttr1 string
    MyAttr2 string
  }

  type Number float64

- pointers

  mypointer *MyType

* Simple examples 3

.code code/code3.go /start contact/,/end contact/

* Simple examples 4

.play code/code3.go /start main/,/end main/

* Simple examples 5

.play code/code4.go /start main/,/end main/

* Interfaces

Interfaces are a way to specify behaviour, contract fulfillment, just like in Java and C#

But unlike in those languages, they're satisfied implicitly

No implements, no extends keywords

.code code/interfaces.go /start def/,/end def/

* Interfaces 2

.code code/interfaces.go /start main/,/end main/

* Interfaces 3

The empty interface, all types satisfy it.

It's like Object in Java where all types are a subtype of it.

.code code/interfaces.go /start a/,/end a/
.code code/interfaces.go /start b/,/end b/

* Interfaces 4

Type assertion

.code code/interfaces.go /start a/,/end a/
.code code/interfaces.go /start c/,/end c/

* Comparing to java

Java has more of everything

- Java has classes, go does not
- Java has access modifiers, go does not
- Java has method overloading, go does not
- Java has inheritance, go does not
- Java has generics, go does not

Go language designers argue that these are assets, not hindrances

* Concurrency

The channel type, you send stuff to it an receive it afterwards

It blocks when sending

.play code/channels.go /start main/,/end main/

* Make?

The [[https://golang.org/ref/spec#Making_slices_maps_and_channels][make]] operator is used to create some builtin types

.play code/make.go /start main/,/end main/

As opposed to new, which is used for your own types

* Concurrency 2

A channel also blocks when receiving

.play code/channels2.go /start main/,/end main/

* Pokemon

.code code/pokemon/pokemon.go /start pokemon_type/,/end pokemon_type/

.code code/pokemon/pokemon.go /start pokemon_print/,/end pokemon_print/

* Pokemon 2

.code code/pokemon/pokemon.go /start pokemon_get/,/end pokemon_get/

* Pokemon 3

.play code/concurrent_fetch.go /start main/,/end main/

* Pokemon 4

.play code/concurrent_fetch2.go /start main/,/end main/

* Pokemon 5

.play code/concurrent_fetch3.go /start main/,/end main/

* Pokemon 6

.play code/concurrent_fetch4.go /start main/,/end main/

* Pokemon 7

.play code/concurrent_fetch5.go /start main/,/end main/

* Environment

GOPATH, don't fight it

* Dependency management

.image img/here_be_dragons.jpg

* Dependency management

An unsolved problem(till now!)

Language designers chose to not get involved with it...

Tools appeared in the wild:

- Godep
- Glide
- Gb
- ...

But in the end they did

GO15VENDOREXPERIMENT

* Type system complaints
